// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc_server/grpc_server.proto

package __

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GigaServiceClient is the client API for GigaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GigaServiceClient interface {
	GetUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error)
	GetAllUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Users, error)
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserId, error)
}

type gigaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGigaServiceClient(cc grpc.ClientConnInterface) GigaServiceClient {
	return &gigaServiceClient{cc}
}

func (c *gigaServiceClient) GetUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/grpc_server.GigaService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigaServiceClient) GetAllUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/grpc_server.GigaService/GetAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigaServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := c.cc.Invoke(ctx, "/grpc_server.GigaService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GigaServiceServer is the server API for GigaService service.
// All implementations must embed UnimplementedGigaServiceServer
// for forward compatibility
type GigaServiceServer interface {
	GetUser(context.Context, *UserId) (*User, error)
	GetAllUsers(context.Context, *empty.Empty) (*Users, error)
	AddUser(context.Context, *User) (*UserId, error)
	mustEmbedUnimplementedGigaServiceServer()
}

// UnimplementedGigaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGigaServiceServer struct {
}

func (UnimplementedGigaServiceServer) GetUser(context.Context, *UserId) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedGigaServiceServer) GetAllUsers(context.Context, *empty.Empty) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedGigaServiceServer) AddUser(context.Context, *User) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedGigaServiceServer) mustEmbedUnimplementedGigaServiceServer() {}

// UnsafeGigaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GigaServiceServer will
// result in compilation errors.
type UnsafeGigaServiceServer interface {
	mustEmbedUnimplementedGigaServiceServer()
}

func RegisterGigaServiceServer(s grpc.ServiceRegistrar, srv GigaServiceServer) {
	s.RegisterService(&GigaService_ServiceDesc, srv)
}

func _GigaService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigaServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.GigaService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigaServiceServer).GetUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigaService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigaServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.GigaService/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigaServiceServer).GetAllUsers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigaService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigaServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_server.GigaService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigaServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// GigaService_ServiceDesc is the grpc.ServiceDesc for GigaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GigaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_server.GigaService",
	HandlerType: (*GigaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _GigaService_GetUser_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _GigaService_GetAllUsers_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _GigaService_AddUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_server/grpc_server.proto",
}
